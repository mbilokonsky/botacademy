{"version":3,"sources":["../../es6/operators/concat-static.js"],"names":[],"mappings":";;;qBAUwB,MAAM;;;;mCAVR,yBAAyB;;;;+BACd,oBAAoB;;0CACzB,gCAAgC;;;;;;;;;;;;AAQ7C,SAAS,MAAM,GAAiB;AAC3C,QAAI,SAAS,mCAAY,CAAC;;sCADI,WAAW;AAAX,mBAAW;;;AAEzC,QAAI,IAAI,GAAG,WAAW,CAAC;AACvB,QAAI,OAAO,AAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAE,QAAQ,KAAK,UAAU,EAAE;AAC/D,iBAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KAC1B;AACD,WAAO,4CAAoB,WAAW,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,sCAAqB,CAAC,CAAC,CAAC,CAAC;CACpF","file":"concat-static.js","sourcesContent":["import immediate from '../schedulers/immediate';\nimport { MergeAllOperator } from './mergeAll-support';\nimport ArrayObservable from '../observables/ArrayObservable';\n/**\n * Joins multiple observables together by subscribing to them one at a time and merging their results\n * into the returned observable. Will wait for each observable to complete before moving on to the next.\n * @params {...Observable} the observables to concatenate\n * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.\n * @returns {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.\n */\nexport default function concat(...observables) {\n    let scheduler = immediate;\n    let args = observables;\n    if (typeof (args[observables.length - 1]).schedule === 'function') {\n        scheduler = args.pop();\n    }\n    return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator(1));\n}\n//# sourceMappingURL=concat-static.js.map"]}